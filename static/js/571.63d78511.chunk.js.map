{"version":3,"file":"static/js/571.63d78511.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/initialState.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/filter/filterSelectors.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactListItem/ContactListItem.module.css?fe27","components/ContactList/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx","webpack://react-homework-template/./src/shared/LabelInput/LabelInput.module.css?3658","shared/LabelInput/LabelInput.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const selectAllContacts = ({ contacts }) => contacts.items;\n\nexport const selectFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return result;\n};\n\nexport const selectLoadingContacts = ({ contacts }) => contacts.isLoading;\n","const initialState = {\n  name: '',\n  number: '',\n};\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"title\":\"ContactForm_title__jZguf\"};","import { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchAddContact } from 'redux/contacts/contactsOperations';\nimport { selectLoadingContacts } from 'redux/contacts/contactsSelectors';\n\nimport Button from 'shared/Button/Button';\nimport LabelInput from 'shared/LabelInput/LabelInput';\nimport Loader from 'components/Loader/Loader';\nimport initialState from './initialState';\nimport styles from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(selectLoadingContacts);\n\n  const handleAddContact = data => {\n    const name = data.name;\n    const number = data.number;\n    dispatch(fetchAddContact({ name, number }));\n  };\n\n  const onChangingInput = e => {\n    const objectKey = e.target.name;\n    initialState[objectKey] = e.target.value;\n    return;\n  };\n\n  const clearForm = e => {\n    e.target.elements.name.value = '';\n    e.target.elements.number.value = '';\n  };\n\n  return (\n    <form\n      className={styles.form}\n      onSubmit={e => {\n        e.preventDefault();\n        handleAddContact(initialState);\n        clearForm(e);\n      }}\n    >\n      <h2 className={styles.title}>Contacts</h2>\n      <LabelInput\n        caption=\"Name\"\n        onChange={onChangingInput}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required=\"required\"\n      />\n      <LabelInput\n        caption=\"Number\"\n        onChange={onChangingInput}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with + \"\n        required=\"required\"\n      />\n      <Button title=\"Add contact\" type=\"submit\" />\n      {loading && <Loader />}\n    </form>\n  );\n};\n","export const selectFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Filter_form__wVnxJ\"};","import { useSelector, useDispatch } from 'react-redux';\n\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/filterSelectors';\n\nimport LabelInput from 'shared/LabelInput/LabelInput';\nimport styles from './Filter.module.css';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    const action = setFilter(e.target.value);\n    dispatch(action);\n  };\n\n  return (\n    <div className={styles.form}>\n      <LabelInput\n        caption=\"Find contacts by name\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilter}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ContactListItem_listItem__EkNJN\",\"contactInfo\":\"ContactListItem_contactInfo__kRg44\",\"name\":\"ContactListItem_name__WEl2o\",\"number\":\"ContactListItem_number__vdoo4\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchDeleteContact } from 'redux/contacts/contactsOperations';\nimport Button from 'shared/Button/Button';\nimport styles from './ContactListItem.module.css';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  return (\n    <li className={styles.listItem}>\n      <div className={styles.contactInfo}>\n        <span className={styles.name}>{name}:</span>\n        <span className={styles.number}>{number}</span>\n      </div>\n      <Button\n        title=\"Delete\"\n        type=\"button\"\n        onClick={() => {\n          handleDeleteContact(id);\n        }}\n      />\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  nameId: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactList_form__YbZHX\",\"text\":\"ContactList_text__+NWAW\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchAllContacts } from 'redux/contacts/contactsOperations';\nimport { selectFilteredContacts } from 'redux/contacts/contactsSelectors';\n\nimport { ContactListItem } from './ContactListItem/ContactListItem';\nimport styles from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const list = useSelector(selectFilteredContacts);\n  const isContacts = Boolean(list.length);\n\n  return (\n    <div className={styles.form}>\n      {isContacts && (\n        <ul className={styles.ul}>\n          {list.map(({ id, name, number }) => {\n            return (\n              <ContactListItem key={id} name={name} number={number} id={id} />\n            );\n          })}\n        </ul>\n      )}\n      {!isContacts && <p className={styles.text}>There are no contacts!</p>}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport styles from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  return (\n    <div className={styles.container}>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"labelForm\":\"LabelInput_labelForm__xBp+Q\",\"inputForm\":\"LabelInput_inputForm__EOGl+\"};","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nimport styles from './LabelInput.module.css';\n\nconst LabelInput = ({\n  caption,\n  type,\n  name,\n  pattern,\n  title,\n  required,\n  value,\n  onChange,\n}) => {\n  const labelId = nanoid();\n  return (\n    <label className={styles.labelForm} htmlFor={labelId}>\n      {caption}\n      <input\n        id={labelId}\n        className={styles.inputForm}\n        type={type}\n        name={name}\n        pattern={pattern}\n        title={title}\n        required={required}\n        onChange={onChange}\n        value={value}\n      />\n    </label>\n  );\n};\n\nexport default LabelInput;\n\nLabelInput.prototypes = {\n  caption: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["selectFilteredContacts","contacts","filter","items","normalizedFilter","toLowerCase","name","includes","selectLoadingContacts","isLoading","number","ContactForm","dispatch","useDispatch","loading","useSelector","onChangingInput","e","objectKey","target","initialState","value","className","styles","onSubmit","preventDefault","data","fetchAddContact","handleAddContact","elements","clearForm","LabelInput","caption","onChange","type","pattern","title","required","Button","Loader","selectFilter","Filter","action","setFilter","ContactListItem","id","onClick","fetchDeleteContact","handleDeleteContact","ContactList","useEffect","fetchAllContacts","list","isContacts","Boolean","length","map","labelId","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","prototypes","PropTypes"],"sourceRoot":""}