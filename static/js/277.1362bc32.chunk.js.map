{"version":3,"file":"static/js/277.1362bc32.chunk.js","mappings":"wQAAaA,EAAe,CAC1BC,MAAO,GACPC,SAAU,ICFCC,EACJ,CACLC,KAAM,QACNC,KAAM,QACNC,UAAU,EACVC,YAAa,oBALJJ,EAOD,CACRC,KAAM,WACNC,KAAM,WACNC,UAAU,EACVC,YAAa,uB,wCCFJC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA0BC,EAAAA,EAAAA,WAAS,UAAKV,IAAxC,eAAOW,EAAP,KAAcC,EAAd,KAEMC,GAAeC,EAAAA,EAAAA,cACnB,YAAiB,IAAdC,EAAa,EAAbA,OACOV,EAAgBU,EAAhBV,KAAMW,EAAUD,EAAVC,MACdJ,GAAS,SAAAK,GACP,OAAO,kBAAKA,GAAZ,cAAwBZ,EAAOW,GAChC,GACF,GACD,CAACJ,IASKX,EAAoBU,EAApBV,MAAOC,EAAaS,EAAbT,SAEf,OACE,kBAAMO,SATa,SAAAS,GACnBA,EAAEC,iBACFV,GAAS,UAAKE,IACdC,GAAS,UAAKZ,GACf,EAK+BoB,UAAWC,EAAAA,EAAAA,KAAzC,WACE,SAACC,EAAA,GAAD,QACEC,QAAQ,QACRC,SAAUX,EACVG,MAAOf,GACHE,KAEN,SAACmB,EAAA,GAAD,QACEC,QAAQ,WACRC,SAAUX,EACVG,MAAOd,GACHC,KAEN,SAACsB,EAAA,EAAD,CAAQC,MAAM,SAAStB,KAAK,aAGjC,EC9CD,EAA4B,6BC0B5B,EAlBkB,WAChB,IAAMuB,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIJ,GACK,SAAC,KAAD,CAAUK,GAAG,eAGpB,gBAAKZ,UAAWC,EAAhB,UACE,SAACb,EAAD,CAAWC,SATM,SAAAwB,GACnBH,GAASI,EAAAA,EAAAA,IAAMD,GAChB,KAUF,C,8ECxBD,EAA4B,8BAA5B,EAAsE,8B,UCIhEX,EAAa,SAAC,GASb,IARLC,EAQI,EARJA,QACAnB,EAOI,EAPJA,KACAC,EAMI,EANJA,KACA8B,EAKI,EALJA,QACAT,EAII,EAJJA,MACApB,EAGI,EAHJA,SACAU,EAEI,EAFJA,MACAQ,EACI,EADJA,SAEMY,ECIK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,CDpBiBQ,GAChB,OACE,mBAAO1B,UAAWC,EAAkB0B,QAASX,EAA7C,UACGb,GACD,kBACEe,GAAIF,EACJhB,UAAWC,EACXjB,KAAMA,EACNC,KAAMA,EACN8B,QAASA,EACTT,MAAOA,EACPpB,SAAUA,EACVkB,SAAUA,EACVR,MAAOA,MAId,EAED,IAEAM,EAAW0B,WAAa,CACtBzB,QAAS0B,IAAAA,OAAAA,WACT7C,KAAM6C,IAAAA,OAAAA,WACN5C,KAAM4C,IAAAA,OAAAA,WACNd,QAASc,IAAAA,OACTvB,MAAOuB,IAAAA,OACP3C,SAAU2C,IAAAA,OACVzB,SAAUyB,IAAAA,K,qBE1CZ,KAAgB,KAAO,2BAA2B,MAAQ,4BAA4B,MAAQ,4BAA4B,OAAS,6B","sources":["components/LoginForm/initialState.js","components/LoginForm/fields.js","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/loginPage.module.css?3459","pages/LoginPage/LoginPage.jsx","webpack://react-homework-template/./src/shared/LabelInput/LabelInput.module.css?3658","shared/LabelInput/LabelInput.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4"],"sourcesContent":["export const initialState = {\n  email: '',\n  password: '',\n};\n","export const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    placeholder: 'Enter your email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    placeholder: 'Enter your password',\n  },\n};\n","import { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { initialState } from './initialState';\nimport { fields } from './fields';\nimport LabelInput from 'shared/LabelInput/LabelInput';\nimport Button from 'shared/Button/Button';\nimport styles from 'components/RegisterForm/RegisterForm.module.css';\n\nexport const LoginForm = ({ onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  const { email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <LabelInput\n        caption=\"Email\"\n        onChange={handleChange}\n        value={email}\n        {...fields.email}\n      />\n      <LabelInput\n        caption=\"Password\"\n        onChange={handleChange}\n        value={password}\n        {...fields.password}\n      />\n      <Button title=\"Log in\" type=\"submit\" />\n    </form>\n  );\n};\n\nLoginForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"loginPage_container__kPxgE\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { login } from 'redux/auth/authOperations';\nimport { isUserLogin } from 'redux/auth/authSelectors';\n\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport styles from './loginPage.module.css';\n\nconst LoginPage = () => {\n  const isLogin = useSelector(isUserLogin);\n  const dispatch = useDispatch();\n\n  const handleSignup = data => {\n    dispatch(login(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n  return (\n    <div className={styles.container}>\n      <LoginForm onSubmit={handleSignup} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"labelForm\":\"LabelInput_labelForm__xBp+Q\",\"inputForm\":\"LabelInput_inputForm__EOGl+\"};","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nimport styles from './LabelInput.module.css';\n\nconst LabelInput = ({\n  caption,\n  type,\n  name,\n  pattern,\n  title,\n  required,\n  value,\n  onChange,\n}) => {\n  const labelId = nanoid();\n  return (\n    <label className={styles.labelForm} htmlFor={labelId}>\n      {caption}\n      <input\n        id={labelId}\n        className={styles.inputForm}\n        type={type}\n        name={name}\n        pattern={pattern}\n        title={title}\n        required={required}\n        onChange={onChange}\n        value={value}\n      />\n    </label>\n  );\n};\n\nexport default LabelInput;\n\nLabelInput.prototypes = {\n  caption: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"button\":\"RegisterForm_button__B3hFq\"};"],"names":["initialState","email","password","fields","type","name","required","placeholder","LoginForm","onSubmit","useState","state","setState","handleChange","useCallback","target","value","prevState","e","preventDefault","className","styles","LabelInput","caption","onChange","Button","title","isLogin","useSelector","isUserLogin","dispatch","useDispatch","to","data","login","pattern","labelId","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","prototypes","PropTypes"],"sourceRoot":""}